package u07.modelling

import u07.utils.Stochastics
import java.util.Random

object CTMCSimulation:

  /**
   * Case class representing an event in the continuous-time Markov chain (CTMC) simulation.
   * @param time
   *   The time at which the event occurs.
   * @param state
   *   The state of the system at the given time.
   * @tparam A
   *   The type of the state.
   */
  case class Event[A](time: Double, state: A)

  /**
   * Type alias for a lazy list of events in the CTMC simulation.
   *
   * @tparam A
   *   The type of the state.
   */
  type Trace[A] = LazyList[Event[A]]

  export CTMC.*

  extension [S](self: CTMC[S])
    /**
     * Generates a simulation trace (a lazy list of events) starting from the initial state `s0`.
     *
     * The trace is generated by iterating through events based on the CTMC's transition rates. For each state, the next
     * state is chosen based on a random probability distribution defined by the rates of transitions from the current
     * state. The time of the next event is calculated using an exponential distribution.
     *
     * @param s0
     *   The initial state of the system.
     * @param rnd
     *   The random number generator used to select transitions probabilistically.
     * @return
     *   A lazy list of events (`Trace[S]`), each containing the time and the state of the system.
     */
    def newSimulationTrace(s0: S, rnd: Random): Trace[S] =
      LazyList.iterate(Event(0.0, s0)):
        case Event(t, s) =>
          if self.transitions(s).isEmpty
          then
            Event(t, s)
          else
            val choices = self.transitions(s) map (t => (t.rate, t.state))
            val next = Stochastics.cumulative(choices.toList)
            val sumR = next.last._1
            val choice = Stochastics.draw(next)(using rnd)
            Event(t + Math.log(1 / rnd.nextDouble()) / sumR, choice)
